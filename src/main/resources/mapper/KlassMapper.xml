<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 不使用namespace的话sql搜索定位会比较方便-->
<mapper namespace="com.cms.mapper.KlassMapper">

    <!-- 实体类与数据库映射字段部分  start -->
    <resultMap id="ResultMapKlass" type="com.cms.model.Klass">
        <result property="id" column="id"  jdbcType="BIGINT"/>
        <result property="subjectid" column="subjectid"  jdbcType="BIGINT"/>
        <result property="gradeid" column="gradeid"  jdbcType="BIGINT"/>
        <result property="name" column="name"  jdbcType="VARCHAR"/>
    </resultMap>
    <!-- 实体类与数据库映射字段部分  end -->

    <!-- 声明数据库字段 -->
    <sql id="Klass_field">
           id,
           subjectid,
           gradeid,
           name
	</sql>

    <!-- 实体类属性  -->
    <sql id="Klass_insert">
        	#{id} ,
        	#{subjectid},
        	#{gradeid}
        	#{name}
	</sql>

    <!-- 执行修改时 数据库字段和表字段比较 -->
    <sql id="Klass_update">
        <if test="subjectid != null" >
            subjectid = #{subjectid} ,
        </if>
        <if test="gradeid != null" >
            gradeid = #{gradeid} ,
        </if>
        <if test="name != null" >
            name = #{name} ,
        </if>
    </sql>

    <!-- 查询时条件 -->
    <sql id="Klass_where">
        <if test="subjectid != null " >
            and subjectid =#{subjectid}
        </if>
        <if test="gradeid != null " >
            and gradeid =#{gradeid}
        </if>
        <if test="name != null " >
            and name =#{name}
        </if>
    </sql>

    <!-- **************************************分割线************************************************************ -->

    <!-- 以下是sql执行语句
         注意：1)需要传参数的请注意你使用的方法是 xxByMap还是ByEntuty 存放的参数类型不一致。
          2)非自定义的方法已经是basedao注明的。方法名一定要和id相同
          3)自定义类的方法注意是否和共有方法重名id
          4)执行sql出现顺序和baseDao方法一致，便于查询请勿随意添加，自定义的sql一律放在自定义sql区域
     -->


    <!-- ========================================新增==================================================================== -->
    <!--
     【注意添加序列】
     1.方法描述：新增数据
     2.参数：实体类
     3.返回：主键
    -->
    <insert id="insert" parameterType="com.cms.model.Klass" useGeneratedKeys="true" keyProperty="id">
        <!--  <selectKey resultType="java.lang.Integer" order="BEFORE" keyProperty="id">
              SELECT 【序列名称】.Nextval as ID from DUAL
        </selectKey>   -->
        INSERT INTO klass (
        <include refid="Klass_field" />
        ) VALUES (
        <include refid="Klass_insert" />
        )
    </insert>


    <!-- ========================================删除==================================================================== -->
    <!--
     1.方法描述：根据主键id删除
     2.参数：主键id
    -->
    <delete id="deleteById" parameterType="java.lang.Long">
	 delete from klass where id=#{id}
	</delete>


    <!--
     1.方法描述：根据实体类删除
     2.参数：主键id
    -->
    <delete id="deleteByEntity" parameterType="com.cms.model.Klass">
        delete from klass
        WHERE 1=1
        <include refid="Klass_where" />
    </delete>


    <!--
     1.方法描述：根据map删除
     2.参数：主键id
    -->
    <delete id="deleteByMap" parameterType="java.util.HashMap">
        delete from klass
        WHERE 1=1
        <include refid="Klass_where" />
    </delete>


    <!-- ========================================修改==================================================================== -->
    <!--
     1.方法描述：修改数据
     2.参数：实体类
    -->
    <update id="update" parameterType="com.cms.model.Klass">
        UPDATE klass
        <set>
            <include refid="Klass_update" />
        </set>
        WHERE 1=1
        <include refid="Klass_where" />
    </update>

    <!--
     1.方法描述：修改数据通过id
     2.参数：实体类
     -->
    <update id="updateById" parameterType="com.cms.model.Klass">
        UPDATE klass
        <set>
            <include refid="Klass_update" />
        </set>
        WHERE 1=1
        and id=#{id}
    </update>



    <!-- ========================================查询列表【不分页】==================================================================== -->

    <!--
     1.方法描述：用于listByMap根据map查询
     2.参数：map
    -->
    <select id="listByMap" resultMap="ResultMapKlass" parameterType="map">
        select <include refid="Klass_field" />
        from klass where 1=1
        <include refid="Klass_where" />
    </select>

    <!--
     1.方法描述：用于select查询所有
     2.参数：无参数
    -->
    <select id="listAll" resultMap="ResultMapKlass">
        select <include refid="Klass_field" />
        from klass
    </select>


    <!--
     1.方法描述：查询所有实体,根据实体属性值为判断条件查询所有实体，
     2.参数：Entity
    -->
    <select id="listAllByEntity" resultMap="ResultMapKlass" parameterType="com.cms.model.Klass">
        select <include refid="Klass_field" />
        from klass where 1=1
        <include refid="Klass_where" />
    </select>



    <!-- ========================================查询单个对象==================================================================== -->
    <!--
     1.方法描述：select查询单个
     2.参数：id
    -->
    <select id="load" resultMap="ResultMapKlass" parameterType="java.lang.Long">
        select 	<include refid="Klass_field" />
        from klass
        where id=#{id}
    </select>



    <!--
     1.方法描述：select查询单个
     2.参数：id
    -->
    <select id="getById" resultMap="ResultMapKlass" parameterType="java.lang.Long">
        select 	<include refid="Klass_field" />
        from klass
        where id=#{id}
    </select>

    <!--
     1.方法描述：用于getByMap根据map查询
     2.参数：map
    -->
    <select id="getByMap" resultMap="ResultMapKlass" parameterType="map">
        select <include refid="Klass_field" />
        from klass where 1=1
        <include refid="Klass_where" />
    </select>

    <!--
     1.方法描述：用于Entity根据Entity查询
     2.参数：Entity
     -->
    <select id="getByEntity" resultMap="ResultMapKlass" parameterType="com.cms.model.Klass">
        select <include refid="Klass_field" />
        from klass where 1=1
        <include refid="Klass_where" />
    </select>


    <!-- ========================================查询列表【分页】==================================================================== -->
    <!--
    1.方法描述：分页
    2.参数：map
    -->
    <select id="findByMap" resultMap="ResultMapKlass" parameterType="map">
        select <include refid="Klass_field" />
        from klass where 1=1
        <include refid="Klass_where" />
    </select>

    <!--
    1.方法描述：分页
    2.参数：Entity
    -->
    <select id="findByEntity" resultMap="ResultMapKlass" parameterType="com.cms.model.Klass">
        select <include refid="Klass_field" />
        from klass where 1=1
        <include refid="Klass_where" />
    </select>


    <!-- ========================================批量新增修改==================================================================== -->
    <!--
     1.方法描述：批量插入
     2.参数：集合/数组
    -->
    <insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO klass (
        <include refid="Klass_field" />
        ) VALUES
        <foreach collection="list" item="item" index="index"
                 separator=",">
            (

            #{item.subjectid} ,
            #{item.gradeid} ,
            #{item.name}
            )
        </foreach>

    </insert>

    <!--
	 1.方法描述：批量修改
	 2.参数：集合/数组
	-->
    <update id="updateBatch" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index"
                 separator=";">
            UPDATE
            klass
            <set>
                <if test="item.subjectid != null" >
                    subjectid = #{item.subjectid},
                </if>
                <if test="item.gradeid != null" >
                    gradeid = #{item.gradeid},
                </if>
                <if test="item.name != null" >
                    name #{item.name},
            </if>
            </set>
            WHERE
            1=1
        </foreach>
    </update>

    <!-- ******************************自定义 sql************************************************************** -->

    <!--
            通过sql查询单个对象 返回对象
     -->
    <select id="getBySqlReturnEntity" resultMap="ResultMapKlass">
		${sql}
   </select>

    <!--
           通过sql查询单个对象 返回map
    -->
    <select id="getBySqlReturnMap" resultType="map">
		${sql}
   </select>

    <!--
            通过sql查询集合 返回对象
     -->
    <select id="listBySqlReturnEntity" resultMap="ResultMapKlass">
		${sql}
   </select>

    <!--
           通过sql查询查询集合 返回map
    -->
    <select id="listBySqlReturnMap" resultType="map">
		${sql}
   </select>

    <!--
            通过sql查询分页集合 返回对象
     -->
    <select id="findBySqlRerturnEntity" resultMap="ResultMapKlass">
		${sql}
   </select>

    <!-- 通过sql修改 -->
    <update id="updateBysql">
       ${sql}
   </update>

    <delete id="deleteBySql">
	${sql}
	</delete>

</mapper>

